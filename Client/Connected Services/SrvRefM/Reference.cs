//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.SrvRefM {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageServer", Namespace="http://schemas.datacontract.org/2004/07/WcfMessengerLibrary")]
    [System.SerializableAttribute()]
    public partial class MessageServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextMessage {
            get {
                return this.TextMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.TextMessageField, value) != true)) {
                    this.TextMessageField = value;
                    this.RaisePropertyChanged("TextMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFrom {
            get {
                return this.UserFromField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFromField, value) != true)) {
                    this.UserFromField = value;
                    this.RaisePropertyChanged("UserFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserTo {
            get {
                return this.UserToField;
            }
            set {
                if ((object.ReferenceEquals(this.UserToField, value) != true)) {
                    this.UserToField = value;
                    this.RaisePropertyChanged("UserTo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SrvRefM.IServiceMessager", CallbackContract=typeof(Client.SrvRefM.IServiceMessagerCallback))]
    public interface IServiceMessager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessager/getConnect", ReplyAction="http://tempuri.org/IServiceMessager/getConnectResponse")]
        long getConnect(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessager/getConnect", ReplyAction="http://tempuri.org/IServiceMessager/getConnectResponse")]
        System.Threading.Tasks.Task<long> getConnectAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessager/Disconnect", ReplyAction="http://tempuri.org/IServiceMessager/DisconnectResponse")]
        void Disconnect(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessager/Disconnect", ReplyAction="http://tempuri.org/IServiceMessager/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMessager/SendMessage")]
        void SendMessage(Client.SrvRefM.MessageServer ms, string nick);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMessager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(Client.SrvRefM.MessageServer ms, string nick);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMessagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMessager/SendMessageCallback")]
        void SendMessageCallback(Client.SrvRefM.MessageServer m);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMessagerChannel : Client.SrvRefM.IServiceMessager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceMessagerClient : System.ServiceModel.DuplexClientBase<Client.SrvRefM.IServiceMessager>, Client.SrvRefM.IServiceMessager {
        
        public ServiceMessagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceMessagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceMessagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMessagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMessagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public long getConnect(string login) {
            return base.Channel.getConnect(login);
        }
        
        public System.Threading.Tasks.Task<long> getConnectAsync(string login) {
            return base.Channel.getConnectAsync(login);
        }
        
        public void Disconnect(long id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(long id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMessage(Client.SrvRefM.MessageServer ms, string nick) {
            base.Channel.SendMessage(ms, nick);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Client.SrvRefM.MessageServer ms, string nick) {
            return base.Channel.SendMessageAsync(ms, nick);
        }
    }
}
